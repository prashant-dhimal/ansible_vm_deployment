---
#import requests
- hosts: vm
  # tasks:
#connection: local
#  gather_facts: ture
  vars_prompt:
   - name: myuser
     prompt: Enter the UserName
     private: no
   - name: mypass
     prompt: Enter the Password
   - name: vc_name
     prompt: Enter the vCenter/ESXi HostName
     private: no
   - name: guest_name
     prompt: Enter the Guest VM Name
     private: no
   - name: hdd
     prompt: Enter the HardDrive Space you want to use by default 50 is for windows an 16 is for linux
     private: no   
   - name: ram
     prompt: Enter the RAM in MB by default 2048 MB
     private: no
   - name: cpu
     prompt: Enter the number of processor you want to use by default 2
     private: no
   - name: ip_addr
     prompt: Enter the Ip address you want to specify
     private: no
   - name: vm_gateway
     prompt: Enter the default gateway
     private: no
   - name: guest_password
     prompt: Enter the guest password  
     # tasks:
     # - name: vm_password_new
     # prompt: Enter new password for the system 
     # tasks:
     # - name: choose_os
     #  command: ls/vmfs/volumes/datastore1/Iso
   - name: os_system
     private: no
     prompt: |
      Which os do you want to use?
      1- Windows Server 
      2- CentOS_7
      3- CentOs_8
      4- Ubuntu
      5- Others  
  tasks:
   - name: Creation of Machine  
    # when: (os_system == "1")
    # no network
     vmware_deploy_ovf:
             #shared_path: //172.31.254.248/Users/Administrator/Desktop/ovf
             hostname: '{{ vc_name  }}'
             username: '{{ myuser  }}'
             password: '{{ mypass  }}'
             name: '{{ guest_name }}'
             datacenter: ha-datacenter
             datastore: datastore1
             validate_certs: no
             ovf: /home/prashant/windows_test/windows_test.ovf
           #  ovf: /mnt/c/users/thinkpad/desktop/windows_server/windows_server.ovf
            # wait_for_ip_ address: yes
             power_on: yes
     when: (os_system == "1")
     delegate_to: localhost
             #- name: install vmware tools via Chocolatey
             #tags: tools
             # name: '{{ guest_name }}'
     # hostname: '{{ vc_name }}'
     # username: '{{ myuser  }}'
     # password: '{{  mypass }}'
     #  vm_username: Administrator
     #  validate_certs: no
     #  vm_password: '{{ guest_password }}'
     # win_chocolatey: name=vmware-tools state=present
     # when: ansible_os_family == "Windows"
   - name: Wait for VMware tools to become available 
     vmware_guest_tools_wait:
      name: '{{ guest_name }}'
      hostname: '{{ vc_name  }}'
      username: '{{ myuser }}'
      password: '{{ mypass }}'
      validate_certs: no
     delegate_to: localhost
     retries: 3
     delay: 15
     register: result           
     until: result is succeeded 
   - name: configure ip-address
     # local_action:
     vmware_vm_shell:
              hostname: '{{ vc_name  }}'
              username: '{{ myuser  }}'
              password: '{{ mypass  }}'
              vm_username: Administrator
              validate_certs: no
              vm_password: '{{ guest_password }}'
              vm_id: '{{ guest_name  }}'
              vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
              vm_shell_args: '-command "(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ ip_addr }} -prefixlength 24 -defaultgateway {{ vm_gateway }})"' 
     when: (os_system == "1")
     delegate_to: localhost
   - name: configure Dns
     # local_action:
     vmware_vm_shell:
              hostname: '{{ vc_name  }}'
              username: '{{ myuser  }}'
              password: '{{ mypass  }}'
              validate_certs: no
              vm_username: Administrator
              vm_password: '{{ guest_password }}'
              vm_id: '{{ guest_name  }}'
              vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'  
              vm_shell_args: '-command "(Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddress 8.8.8.8)"'
     when: (os_system == "1")
     delegate_to: localhost 		 
   - name: guests_facts  
     vmware_guest_info:
             hostname: "{{ vc_name }}"
             username: "{{ myuser  }}"
             password: "{{ mypass }}"
             datacenter: ha-datacenter
             validate_certs: no
             name: "{{ guest_name }}"
     delegate_to: localhost
     register: facts
   - name: disks_facts
     vmware_guest_disk_facts:   
         hostname: "{{ vc_name }}"
         username: "{{ myuser  }}"
         password: "{{ mypass }}"
         datacenter: ha-datacenter
         validate_certs: no
         name: "{{ guest_name }}"
     delegate_to: localhost   
     # when: os_system == "{{ os_system }}"  and hdd > "{{ hdd }}"
     #  disk:
     #        size-gb: "{{ hdd }}"
     #        # type: thin
     #        datastore: datastore1
     # when: ( ram > "2048" )
     # state: poweredoff
     # - hardware:
     #            memory_mb: "{{ ram  }}"      
     # when: (cpu > "2")
     # state: poweredoff
     # - hardware:
     #        num_cpu: "{{ cpu  }}"
     delegate_to: localhost
   - name: creation of machine          
     when: (os_system == "2")
     vmware_deploy_ovf:
            hostname: '{{ vc_name  }}'
            username: '{{ myuser }}'
            password: '{{ mypass  }}'
            name: '{{ guest_name }}'
            datacenter: ha-datacenter
            datastore: datastore1
            validate_certs: no
            ovf: /mnt/c/users/thinkpad/desktop/root_test_mfa/root_test_mfa.ovf
   #         wait_for_ip_ address: yes
            power_on: yes 
     delegate_to: localhost
     name: configure ip-address
     local_action:
             vmware_vm_shell:
                     vm_username: root
                     vm_password: "{{ guest_password }}"
                     vm_id:  "{{ guest_name }}"
                     vm_shell: /uer/bin/sudo
                     vm_shell_args: 'usr/sbin/ifconfig ens192 "{{ ip_addr }}" netmask 255.255.255.0 broadcast "" {{ vm_gateway }}"'
                     vm_shell_cwd: "/usr/sbin"
     delegate_to: locahost
    #tasks:    
   - name: hdd increase
     tags: hdd
     # when: (os_system == "{{ os_system }}" and hdd < "{{ hdd }}") 
     vmware_guest: 
       username: "{{ myuser }}"
       hostname: "{{ vc_name }}"
       name: "{{ guest_name }}"
       password: "{{ mypass }}" 
       disk:
           - size_gb: "{{ hdd }}"
             type: thin
             datastore: datastore1
             datacenter: ha-datacenter
       validate_certs: no
     when: (hdd > "20") 
     delegate_to: localhost
   - name: copy file to vm
     vmware_guest_file_operation:
         hostname: "{{ vc_name }}"
         username: "{{ myuser }}"
         password: "{{ mypass }}"
         datacenter: ha-datacenter
         vm_id: "{{ guest_name }}"
         vm_username: Administrator
         vm_password: "{{ guest_password }}"
         validate_certs: no
         copy:
             src: /home/prashant/sites/hdd_ext.ps1
             dest: C:\Users\Administrator\Desktop\hdd_ext.ps1
             overwrite: False
             # win_command: powershell.exe -ExecutionPolicy ByPass -File C:\tmp\hdd_ext.ps1     
     when: (os_system == "1" and  hdd > "20")        
     delegate_to: localhost  
   - name: size extend
     vmware_vm_shell:                    
       hostname: '{{ vc_name  }}'
       username: '{{ myuser  }}'
       password: '{{ mypass  }}'
       validate_certs: no
       vm_username: Administrator
       vm_password: '{{ guest_password }}'
       vm_id: '{{ guest_name  }}'
       #vm_shell: 'C:\windows\system32\cmd.exe'
       vm_shell: 'C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe'
       vm_shell_args: "{{ item }}"
       with_items:
        - "Set-ExecutionPolicy Unrestricted}"
        - '"C:\Users\Administrator\Desktop\hdd_ext.ps1"'   
                  
       # vm_shell_args: powershell.exe -ExecutionPolicy Bypass -File hdd_ext.ps1 -pass "{{ guest_password }}" -user Administrator -gr Localgroup
       #vm_shell_cwd: 'C:\Users\Administrator\Desktop'
     # username: "{{ myuser }}"
     # hostname: "{{ vc_name }}"
     # name: "{{ guest_name }}" 
     # password: "{{ mypass }}" 
     # tags: test
     #  win_partition:
             # partition_size: -1
             # partition_number: 1
             # disk_number: 1

     # hostname: '{{ vc_name  }}'
     # username: '{{ myuser  }}'
     # password: '{{ mypass  }}'
     # validate_certs: no
     # vm_username: Administrator
     # vm_password: '{{ guest_password }}'
     # vm_id: '{{ guest_name  }}'
     when: (os_system == "1" and hdd > "20")
     delegate_to: localhost  
   - name: Set the state of a virtual machine to poweroff
     vmware_guest_powerstate:
         hostname: "{{ vc_name }}"
         username: "{{ myuser }}"
         password: "{{ mypass }}"
         validate_certs: no
         #folder: "/{{ datacenter_name }}/vm/my_folder"
         name: "{{ guest_name }}"
         state: powered-off
     delegate_to: localhost
     register: deploy
   - name: memory_increase   
     tags: hdd
    #when: ( ram > "{{ #ram }})"
     vmware_guest:
      username: "{{ myuser }}"
      hostname: "{{ vc_name }}"
      name: "{{ guest_name }}"
      password: "{{ mypass }}"
      # #state: poweredoff
      hardware:
             memory_mb: "{{ ram }}"
             # datacenter: ha-datacenr
      validate_certs: no         
     when: ( ram > "2048") 
     # state: poweredoff     
     delegate_to: localhost
   - name: cpu increase
     tags: hdd
    # when: ( cpu > " 2 " )
     vmware_guest:
      username: "{{ myuser }}"
      hostname: "{{ vc_name }}"
      name: "{{ guest_name }} "
      password: "{{ mypass  }}"  
      #state: poweredoff
      hardware:
             num_cpu: "{{ cpu }}"
      validate_certs: no
     when: (cpu > "2")
     delegate_to: localhost 
